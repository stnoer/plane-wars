@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	- shootNum:int
        - power:int
        - direction:int
    	# maxHp:int
        # hp:int
        + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
        + decreaseHp(int decrease):void
        + increaseHp(int increase):void
        + getDirection():int
        + getPower():int
        + setMaxHP(int num):void
        + getHp():int
        + {abstract} shoot():List<BaseBullet>
 }


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    - {static} heroAircraft :HeroAircraft
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + {static}getHeroAircraft:HeroAircraft
    + shoot():List<BaseBullet>
    + changeShootType(int supplyShootType):void
}

AbstractAircraft <|-- HeroAircraft

class MobEnemy {
    + MobEnemy()
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- MobEnemy

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    + EliteEnemy()
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- EliteEnemy

class ElitePlus {
    - shootNum:int
    - power:int
    - direction:int
    + ElitePlus()
    + forward():void
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- ElitePlus

class Boss {
    - shootNum:int
    - power:int
    - direction:int
    + Boss()
    + forward():void
    + getPower():int
    + shoot():List<BaseBullet>
}
AbstractAircraft <|-- Boss

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
}


BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet

abstract class AbstractSupply
{
    + AbstractSupply(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft):void
}

AbstractFlyingObject <|-- AbstractSupply

class BombSupply
{
    - {final} bombObserverlist:List<Observer>
    + BombSupply(int locationX, int locationY, int speedX, int speedY)
    + addObserver(Observer observer):void
    + removeObserver(Observer observer):void
    + notifyAllObserver():void
    + effect(HeroAircraft heroAircraft):void
}

AbstractSupply <|-- BombSupply

class FireSupply
{
    + FireSupply(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft):void
}

AbstractSupply <|-- FireSupply

class FirePlusSupply
{
    + FirePlusSupply(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft):void
}

AbstractSupply <|-- FirePlusSupply


class HpSupply
{
    + HpSupply(int locationX, int locationY, int speedX, int speedY)
    + effect(HeroAircraft heroAircraft):void
}

AbstractSupply <|-- HpSupply

@enduml